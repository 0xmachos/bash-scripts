#!/usr/bin/env bash
# bash-scripts/x86_check

# x86_check
#  Check if you have any 32-bit apps in /Applications

set -euo pipefail
# -e exit if any command returns non-zero status code
# -u prevent using undefined variables
# -o pipefail force pipelines to fail on first non-zero status code


IFS=$'\n\t'
# Set Internal Field Separator to newlines and tabs
# This makes bash consider newlines and tabs as separating words
# See: http://redsymbol.net/articles/unofficial-bash-strict-mode/


function usage {

  echo -e "\\nCheck '/Applications' for 32-bit Apps"
  echo "Usage:"
  echo "  ./x86_check"
  exit 0
}


function check_instruction_set {

  local app_path=${1:-?}
  local app_name=${2:-?}

  if file "${app_path}" | grep --quiet '64-bit'; then
    :
  elif file "${app_path}"  | grep --quiet 'i386'; then
    BADAPPS+=("${app_name}")

  elif [ "${app_path}" == "/Applications/Utilities/Contents/MacOS/Utilities" ]; then
    :
  elif [ "${app_path}" == "/Applications/TeX/Contents/MacOS/TeX" ]; then
    :
  elif echo "${app_path}" | grep --quiet 'Install macOS'; then
    :
  else
    echo "[‚ùå] Unable to parse contents of '${app_name}'"
  fi
}


function get_applications {

  local app_name
  local app_path
  local utility_name
  local utility_path
  local tex_name
  local tex_path

  for i in /Applications/*; do

    app_name="$(echo "${i}" | awk -F '/' '{print $3}' | awk -F '.' '{print $1}')"
    app_path="${i}/Contents/MacOS/${app_name}"
    APPS+=("${app_path}")

    if [ "${i}" == "/Applications/Utilities" ]; then
      
      for u in /Applications/Utilities/*; do

        utility_name="$(echo "${u}" | awk -F '/' '{print $4}' | awk -F '.' '{print $1}')"
        utility_path="${u}/Contents/MacOS/${utility_name}"
        APPS+=("${utility_path}")
      done
    
    elif [ "${i}" == "/Applications/TeX" ]; then

      for t in /Applications/TeX/*.app; do

        tex_name="$(echo "${t}" | awk -F '/' '{print $4}' | awk -F '.' '{print $1}')"
        tex_path="${t}/Contents/MacOS/${tex_name}"
        APPS+=("${tex_path}")
      done
    fi
  done
}


function main {

  local cmd=${1:-""}

  if [[ "${cmd}" =~ ^(-h|-H|-help|--help|help)$ ]]; then
    usage
    exit 1
  fi

  local app_name

  APPS=()
  BADAPPS=()

  get_applications

  for app in "${APPS[@]}"; do

    app_name="$(echo "${app}" | awk -F '/' '{print $3}' | awk -F '.' '{print $1}')"
    check_instruction_set "${app}" "${app_name}"

  done

  if [ ${#BADAPPS[@]} -eq 0 ]; then
    echo "[‚úÖ] No 32-bit applications found"
  else

    for b in "${BADAPPS[@]}"; do
      echo "[‚ö†Ô∏è ] Found ${#BADAPPS[@]} 32-bit Application"
      echo "[üç∫] 32-bit Applications:"
      echo "  ${b}"
    done
  fi
}

main "$@"
